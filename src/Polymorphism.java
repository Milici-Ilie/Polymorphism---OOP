public class Polymorphism {
    //this will represent our "Movie" class ðŸŽ£ðŸŽ£ [POLYMORPHISM] ðŸŽ£ðŸŽ£ ðŸŽ£ðŸŽ£ [POLYMORPHISM] ðŸŽ£ðŸŽ£

    private String title;

    public Polymorphism(String title) {
        this.title = title;
    }//constructor

    public void watchMovie() {
        String instanceType = this.getClass().getSimpleName();// will inherit the name of the class, in our case is "Polymorphism"
        System.out.println(title + " is a " + instanceType + " film");//Metoda getClass() este furnizatÄƒ implicit de cÄƒtre clasa Object, din care toate celelalte clase sunt derivate Ã®n Java. AceastÄƒ metodÄƒ returneazÄƒ obiectul Class asociat cu instanÈ›a curentÄƒ a obiectului È™i oferÄƒ informaÈ›ii despre clasÄƒ, cum ar fi numele clasei, metodele, cÃ¢mpurile etc.
        //Metoda getSimpleName() face parte din clasa Class È™i este folositÄƒ pentru a obÈ›ine numele simplu al clasei. Numele simplu este numele clasei fÄƒrÄƒ pachetul sÄƒu. Ambele metode sunt incluse
        // Ã®n Java È™i sunt disponibile pentru toate clasele.
    }
}

class Adventure extends Polymorphism {
    public Adventure(String title) {
        super(title);
    }//constructor

    @Override
    public void watchMovie() {
        super.watchMovie();
        System.out.printf(".. %s%n".repeat(3),
                "Pleasant Scene",
                "Scary Music",
                "Something Bad Happens");
    }// here we override the original method with our attributes, and the original method remain the same and ready to be used in another place/method
}

class Comedy extends Polymorphism {
    public Comedy(String title) {
        super(title);
    }//constructor

    @Override
    public void watchMovie() {
        super.watchMovie();
        System.out.printf(".. %s%n".repeat(3),
                "Something funny happens",
                "Something even funnier happens",
                "Happy Ending");
    }// here we override the original method with our attributes, and the original method remain the same and ready to be used in another place/method
}

class ScienceFiction extends Polymorphism {
    public ScienceFiction(String title) {
        super(title);
    }//constructor

    @Override
    public void watchMovie() {
        super.watchMovie();
        System.out.printf(".. %s%n".repeat(3),
                "Bad Aliens do Bad Stuff",
                "Space Guys Chase Aliens",
                "Planet Blows Up");
    }// here we override the original method with our attributes, and the original method remain the same and ready to be used in another place/method
}
